<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Research Notebook</title>
    <link href="http://holdenlee.github.io/notebook/atom.xml" rel="self" />
    <link href="http://holdenlee.github.io/notebook" />
    <id>http://holdenlee.github.io/notebook/atom.xml</id>
    <author>
        <name>Holden Lee</name>
        <email>oldheneel@gmail.com</email>
    </author>
    <updated>2016-11-29T00:00:00Z</updated>
    <entry>
    <title>POMDPs</title>
    <link href="http://holdenlee.github.io/notebook/posts/tcs/machine_learning/reinforcement_learning/POMDP.html" />
    <id>http://holdenlee.github.io/notebook/posts/tcs/machine_learning/reinforcement_learning/POMDP.html</id>
    <published>2016-11-29T00:00:00Z</published>
    <updated>2016-11-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>POMDPs</h1>
    </div>
    <div class="info">
      
       
        <p>Posted: 2016-11-29 
          , Modified: 2016-11-29 
	</p>
      
       <p>Tags: <a href="/tags/none.html">none</a></p> 
    </div>
    
  </div>
  <!--/div-->

  <div class="toc"> <ul>
 <li><a href="#np-hardness">NP-hardness</a></li>
 </ul> </div>

  <div class="blog-main">
    <p>[ALA16] Open problem - approximate planning of POMDPs in the class of memoryless policies</p>
<p>The relevant matrices/tensors are <span class="math inline">\(f_T(x'|x,a) = T_{xx'a}\)</span>, <span class="math inline">\(f_R(r|x,a) = \Ga_{xar}\)</span>, and <span class="math inline">\(f_O(y|x) = O_{xy}\)</span>. View it two ways.</p>
<ol type="1">
<li>As an extended MDP, with transition matrix <span class="math inline">\(P_{(x,a), (y,b)} = T_{yxa}\Pi_{ay}\)</span>, <span class="math inline">\(\om'\)</span> the stationary vector. (I think it’s <span class="math inline">\(\om' = (I-P^T(PP^T)^{-1}P)e_1\)</span>.) We try to maximize <span class="math display">\[\max_{\Pi\ge 0, \sum_a \pi(a|y)=1} \sum_{x,a} \om_\pi(x) \sum_y O_{xy} \Pi_{ay} \ol r(x,a).\]</span></li>
<li>As a MDP with restricted class of policies - a linear subspace, <span class="math display">\[ \Pi_{ax} = O_{xy} \Pi_{ay}.\]</span></li>
</ol>
<p>We are maximizing over a linear subspace, but the value is not convex in the policy. We can easily get to local min using policy gradient (this is easier than policy gradient because we know all parameters).</p>
<p>Questions:</p>
<ol type="1">
<li>Why is this nonconvex? Since we are maximizing, actually the question is “why is this nonconcave”? Come up with a simple concrete example where this is nonconvex. Answer (this is not full-rank, but you can change it infinitesimally): Have a state machine that rewards you only if you choose LL or RR, not if you switch. Then the optimal strategy is to always play L or always play R, rather than somewhere in the middle. More complicatedly, you can set up something which rewards the player from playing probabilities close to <span class="math inline">\(p_1,\ldots, p_k\)</span>, so there can be multiple local optima.</li>
<li>Simpler question: Suppose there are only 2 actions each step, and there is no view. Find the best strategy. Bellman’s equation gives <span class="math inline">\(Q=R + PQ\coltwo{p}{1-p}\)</span>. This is a linear equation in <span class="math inline">\(2|S|\)</span> variables, so the value is a rational function of degree <span class="math inline">\(\le 2|S|\)</span> in <span class="math inline">\(p\)</span>. I think in general you get rational functions also, but in more variables! Can we reduce from something hard like tensor decomposition to this? The difficulty is writing polynomials as solutions to systems of equations… (The denominator is multilinear if you treat all states as the same… but perhaps you can get a broader class.) Or maybe we can’t just perturb the non-full-rank case, we actually need something far enough from low-rank so that the strategy is not oblivious… (ALA16 don’t restrict to full rank.)</li>
</ol>
<p>See also Bertsekas on combining states.</p>
<p>The projection in the expression seems messy to deal with.</p>
<h2 id="np-hardness">NP-hardness</h2>
<p>Finding the optimal memoryless policy for a POMDP is NP-hard. (Proof: We can reduce from any polynomial optimization problem over the simplex to a POMDP as follows. The observation space is trivial, <span class="math inline">\(\{1\}\)</span>. Then a memoryless policy is just a vector of probabilities for different actions, summing to 1. Note a deterministic POMDP is a finite state machine where the actions correspond to characters read in by the machine. Given a polynomial is degree <span class="math inline">\(n\)</span>, make a POMDP that is stratified in <span class="math inline">\(n\)</span> layers. For each monomial <span class="math inline">\(a_{i_1\ldots i_n} x_{i_1}\cdots x_{i_n}\)</span> create a path in the finite state machine that reads in actions <span class="math inline">\(i_1,\ldots, i_n\)</span>, ends in a reward of <span class="math inline">\(a_{i_1\ldots i_n}\)</span> and then resets. Then the average reward is <span class="math inline">\(1/n\)</span> times the polynomial.)</p>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Weekly summary 2016-12-03</title>
    <link href="http://holdenlee.github.io/notebook/posts/summaries/2016-12-03.html" />
    <id>http://holdenlee.github.io/notebook/posts/summaries/2016-12-03.html</id>
    <published>2016-11-28T00:00:00Z</published>
    <updated>2016-11-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Weekly summary 2016-12-03</h1>
    </div>
    <div class="info">
      
       
        <p>Posted: 2016-11-28 
          , Modified: 2016-12-03 
	</p>
      
       <p>Tags: <a href="/tags/none.html">none</a></p> 
    </div>
    
  </div>
  <!--/div-->

  <div class="toc"> <ul>
 <li><a href="#hmmmdp-project">HMM/MDP project</a></li>
 <li><a href="#alexanlp-experiments">Alexa/NLP experiments</a></li>
 <li><a href="#other-experiments">Other experiments</a></li>
 <li><a href="#learning">Learning</a></li>
 </ul> </div>

  <div class="blog-main">
    <h2 id="hmmmdp-project">HMM/MDP project</h2>
<ul>
<li>[ALA16] open problem, simple policy optimization - is it intractable? (Tue. started)</li>
<li>[JKAL16] Contextual MDP paper (Tue. started)</li>
<li>Go through policy gradient (Tue)</li>
<li>Theory review
<ul>
<li>Ch. 3, 5 of FA</li>
<li>Ch. 6 Bertsekas</li>
</ul></li>
<li>Experiments
<ul>
<li>Program basic RL</li>
</ul></li>
</ul>
<h2 id="alexanlp-experiments">Alexa/NLP experiments</h2>
<ul>
<li>Get Yingyu’s word2vec, DL code up and running.
<ul>
<li>Try modifying with other modalities (sentiments, etc.)</li>
</ul></li>
<li>Lisa Lee’s thesis</li>
<li>Parsing
<ul>
<li>Stanford parser</li>
<li>Try training NN</li>
<li>SyntaxNet</li>
</ul></li>
<li>Train word vectors with syntax trees.</li>
<li>Read EMNLP papers.</li>
</ul>
<h2 id="other-experiments">Other experiments</h2>
<ul>
<li>Neural net learns dictionaries: run experiments.
<ul>
<li>NNDL experiment.</li>
<li>Where is the cusp?</li>
</ul></li>
</ul>
<h2 id="learning">Learning</h2>
<ul>
<li>EM algorithm</li>
<li>Nonparametric/kernel methods (cf. BCO)</li>
<li>Tensor decomposition and latent variable model</li>
<li>MDP theory (see above)</li>
<li>Summarize papers</li>
</ul>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Policy gradient</title>
    <link href="http://holdenlee.github.io/notebook/posts/tcs/machine_learning/reinforcement_learning/policy_gradient.html" />
    <id>http://holdenlee.github.io/notebook/posts/tcs/machine_learning/reinforcement_learning/policy_gradient.html</id>
    <published>2016-11-22T00:00:00Z</published>
    <updated>2016-11-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Policy gradient</h1>
    </div>
    <div class="info">
      
       
        <p>Posted: 2016-11-22 
          , Modified: 2016-11-22 
	</p>
      
       <p>Tags: <a href="/tags/reinforcement%20learning.html">reinforcement learning</a></p> 
    </div>
    
  </div>
  <!--/div-->

  <div class="toc"> <ul>
 <li><a href="#setup">Setup</a></li>
 <li><a href="#computation">Computation</a></li>
 <li><a href="#questions-notes">Questions, notes</a></li>
 </ul> </div>

  <div class="blog-main">
    <p>[SASM00] Policy gradient methods for RL with function approximation</p>
<p>A version of policy iteration with arbitrary differentiable function converges to a locally optimal policy.</p>
<p>Problems with the value-function approach</p>
<ul>
<li>finds deterministic policies.</li>
<li>a small change in estimated vaue of action can change the action selected. (obstacles for convergence guarantees)</li>
</ul>
<p><span class="math display">\[\De \te \approx \al \pdd{\rh}{\te}.\]</span></p>
<h2 id="setup">Setup</h2>
<p>The policy is parameterized by <span class="math inline">\(\te\)</span>, and gives probabilities of making action <span class="math inline">\(a\)</span> in state <span class="math inline">\(s\)</span>, <span class="math display">\[
\pi_\te(a|s) = \Pj_\te(a|s).
\]</span> Before, we considered the value at every state. Here, it’s more convenient to consider the value of a fixed start state, which we’ll denote by <span class="math inline">\(\rh\)</span>.</p>
There are 2 ways we can have an expression for <span class="math inline">\(\rh\)</span>.

<p>Consider two settings.</p>
<ol type="1">
<li>Average reward setting. Here we want to maximize <span class="math inline">\(\lim_{T\to \iy} \rc{T}\sumz t{T-1} R_t\)</span>. Then let <span class="math inline">\(d_\te\)</span> be the stationary distribution: <span class="math inline">\(d_\te(s)\)</span> is the probability of being at state <span class="math inline">\(s\)</span> under policy <span class="math inline">\(\pi_\te\)</span>.</li>
<li>Discounted reward setting. Here we want to maximize <span class="math inline">\(\sumz t{\iy} \ga^t R_t\)</span>. Now <span class="math inline">\(d_\te\)</span> has to take into account the discounting, so <span class="math display">\[ d_\te (s) = \sumz t{\iy} \ga^t \Pj (s_t = s).\]</span></li>
</ol>
We also have to change our definition of <span class="math inline">\(Q\)</span> for the average reward setting - otherwise all the <span class="math inline">\(Q\)</span>’s would be the same! In the two cases, define
<span class="math display">\[\begin{align}
Q^{\pi}(s,a) &amp;= \sumz t{\iy} \E[R_t - \rh_\pi | s_0=s,a_0=a, \te]\\
Q^{\pi}(s,a) &amp;= \E\ba{\sumz k{\iy} \ga^{k} R_{t+k} | s_t=s, a_t=a, \pi}.
\end{align}\]</span>
<p>The second is the usual definition of the <span class="math inline">\(Q\)</span>-function. Think of the first as “advantage” of starting at <span class="math inline">\((s,a)\)</span>. It converges because working out with matrices, <span class="math display">\[
\E R_t = \rh_\te + O_{s,a} \pa{\la^t}
\]</span> where <span class="math inline">\(\la\)</span> is the second-largest eigenvalue of the transition matrix (besides 1). So instead of discounting to make <span class="math inline">\(Q\)</span> converge, we subtract the mean to make <span class="math inline">\(Q\)</span> converge. Define <span class="math inline">\(V^\pi(s) = \max_a Q^\pi(s,a)\)</span>.</p>
<p>Then (for continuous spaces replace <span class="math inline">\(\sum\)</span> with <span class="math inline">\(\int\)</span>) <span class="math display">\[\rh_\te = \sum_s d_\te(s) \sum_{a} Q^\te(s,a) \pi_\te(a|s) \]</span> (Whenever something depends on the policy <span class="math inline">\(\pi_\te\)</span>, we write <span class="math inline">\(\te\)</span> as shorthand: <span class="math inline">\(Q^{\te} = Q^{\pi_\te}\)</span>.</p>
<h2 id="computation">Computation</h2>
<p>We need to calculate the derivative. Naively using the product rule, we would need <span class="math inline">\(\nb_\te d_\te(s)\)</span> which we don’t have a way of estimating. But we can derive an expression that doesn’t include this term! To do this we differentiate the Bellman equation for <span class="math inline">\(V\)</span> (which implicitly includes <span class="math inline">\(\rh\)</span>).</p>
<p><strong>Lemma 1</strong>. <span class="math display">\[
\nb_\te \rh_\te = \sum_s d_\te(s) \sum_a \nb_\te \pi(s|a) Q^\te(s,a).
\]</span></p>
<em>Proof</em>. Our strategy is to write the one-step expansion of <span class="math inline">\(Q^\te\)</span> <!-- , and find there's a term that cancels with $\nb_\te \pi_\te(a|s)$.--> Let <span class="math inline">\(R(s,a)\)</span> be the one-step reward of action <span class="math inline">\(a\)</span> in state <span class="math inline">\(s\)</span>. We write the proof for the undiscounted case.
<span class="math display">\[\begin{align}
\nb_\te V^\te (s)
&amp;= \sum_a \pa{
(\nb_\te \pi_\te(a|s)) Q^\te(s,a) 
+
\pi_\te(a|s) (\nb_te Q^\te(s,a))}
&amp;= 
\sum_a (\nb_\te \pi_\te (a|s)) Q^\te(s,a) 
+ \pi(a|s) \nb_\te\pa{\E R(s,a) - \rh_\te + \sum_{s'} \Pj(s'|s,a) V^{\te}(s')}\\
\nb_\te \rh_\te &amp;= \pa{\sum_a \nb_\te \pi_\te (a|s)) Q^\te(s,a) +  + \pi(a|s) \sum_{s'} \nb_\te V^{\te} (s') \Pj(s'|s,a) }- \nb_\te V^{\te}(s)
\end{align}\]</span>
This is unsatisfactory because we can’t estimate <span class="math inline">\(\nb_\te V^{\te}(s')\)</span> for every <span class="math inline">\(s'\)</span>. But there is a combination of these we can estimate, namely the stationary distribution. So multiply by <span class="math inline">\(d_\te(s)\)</span> and sum.
<span class="math display">\[\begin{align}
\nb_\te \rh_\te &amp;= \pa{\sum_{s} d_\te(s) \pa{\sum_a(\nb_\te \pi_\te(a|s)) Q^{\te}(s,a)} + \cancel{d_\te(s) \pa{\sum_a\pi(a|s) \sum_{s'} \nb_\te V^{\te}(s') \Pj(s'|s,a)}} - \cancel{\nb_\te V_\te(s)}}.
\end{align}\]</span>
<p>We have to replace <span class="math inline">\(Q^\te\)</span> by an estimate. This doesn’t correspond to an update rule directly, because we can’t estimate <span class="math inline">\(\nb_\te(s|a)\)</span>.</p>
We estimate of <span class="math inline">\(Q^\te\)</span> by a function approximation, updating by <span class="math inline">\(\nb_w (\wh Q^\te(s,a) - f_w(s,a))^2\)</span> given a sample <span class="math inline">\((s,a)\)</span>. This converges to a local min where (<span class="math inline">\(\wh Q^\te\)</span> is an unbiased estimator)
<span class="math display">\[\begin{align}
\E \nb_w \pa{\wh Q^{\te} (s,a) - f_w(s,a)} &amp;=0\\
\sum_s d_\te(s) \sum_a \pi_\te(s|a) (Q^\te(s,a) - f_w(s,a)) &amp;=0
\end{align}\]</span>
<p>We would like to be able to replace <span class="math inline">\(Q^\te(s,a)\)</span> in Lemma 1 with the approximation <span class="math inline">\(f_w(s,a)\)</span>. In order to do this we need the error to be 0: <span class="math display">\[
\sum_s d^{\pi}(s) \pa{
\sum_a (\nb_\te \pi_\te(s|a)) Q^\te(s,a) - \nb_\te\pi(s|a) f_w(s,a)
}
\]</span> In order for these to match up, we need <span class="math display">\[
\nb_w f_w(s,a) = \fc{\nb_\te \pi(s|a)}{\pi(s|a)} = \nb_\te(\ln \pi(s|a)).
\]</span></p>
<p><strong>Question</strong>: Do people wait until convergence, or do they do alternating minimization in practice? Does alternating minimization converge?</p>
Work out the loglinear case:
<span class="math display">\[\begin{align}
\pi(s|a) &amp;= \fc{e^{\te^T \phi_a(s)}}{\sum_b e^{\te^T\phi_b(s)}}\\
\nb_\te \ln \pi(s|a) &amp;= \phi_a(s) - \fc{\sum_b e^{\te^T\phi_b(s)} \phi_b(s)}{\sum_b e^{\te^T \phi_b(s)}}\\
&amp;= \phi_a(s) - \sum_b \pi(s|b) \phi_b(s).
\end{align}\]</span>
<p>So take <span class="math display">\[
f_w(s,a) = w^T ( \phi_a(s) - \sum_b \pi(s|b) \phi_b(s)).
\]</span></p>
<p>How well does this parametrization work, compared to Q-learning by FA?</p>
<h2 id="questions-notes">Questions, notes</h2>
<ol type="1">
<li>Does the LP formulation give a way to understand the derivative? In terms of slack constraints, etc.</li>
<li>How nonconvex is this? What does the optimization landscape look like? Ex. take 2-action, 3-action case, random transition matrices, some kind of grouping together of states. See <a href="POMDP.html">POMDP</a></li>
<li>Try to prove intractability - see POMDP. The parametrization there is a slice of the product of simplices, rather than a subspace in logspace. But you can relate it to optimizing rational functions this way. The main reason I suspect intractability is that the degree can be as large as number of parameters…</li>
</ol>
Minimizing cross-entropy for loglinear is a convex problem. Minimize perplexity for distribution <span class="math inline">\(\Pj(y|x)\)</span> with distribution <span class="math display">\[
\wh P(y|x) = \fc{e^{\te_y^T\phi(x)}}{\sum_{y'} e^{\te_{y'}^T \phi(x)}}.
\]</span> To show convexity, we need to show log of partition function is convex. Reducing to 1-variable case,
<span class="math display">\[\begin{align}
f &amp;= \ln \sum_i e^{a_i+b_i\te}\\
f_\te &amp; = \E b_i\\
f_{\te\te} &amp;= \E b_i^2 - \pa{\E b_i}^2 \ge 0.
\end{align}\]</span>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Weekly summary 2016-11-19</title>
    <link href="http://holdenlee.github.io/notebook/posts/summaries/2016-11-19.html" />
    <id>http://holdenlee.github.io/notebook/posts/summaries/2016-11-19.html</id>
    <published>2016-11-14T00:00:00Z</published>
    <updated>2016-11-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Weekly summary 2016-11-19</h1>
    </div>
    <div class="info">
      
       
        <p>Posted: 2016-11-14 
          , Modified: 2016-11-14 
	</p>
      
       <p>Tags: <a href="/tags/none.html">none</a></p> 
    </div>
    
  </div>
  <!--/div-->

  <div class="toc"> <ul>
 <li><a href="#hmmmdp-project">HMM/MDP project</a></li>
 <li><a href="#alexanlp-experiments">Alexa/NLP experiments</a></li>
 <li><a href="#other-experiments">Other experiments</a></li>
 <li><a href="#learning">Learning</a></li>
 </ul> </div>

  <div class="blog-main">
    <h2 id="hmmmdp-project">HMM/MDP project</h2>
<ul>
<li>Lit review
<ul>
<li>[TLF] Monte Carlo HiddenMarkov Models: Learning Non-Parametric Models of Partially Observable Stochastic Processes (Mon.)</li>
</ul></li>
<li>Theory review
<ul>
<li>Ch. 3, 5 of FA</li>
<li>Ch. 6 Bertsekas</li>
</ul></li>
<li>Experiments
<ul>
<li>Program basic RL</li>
</ul></li>
<li>Theory: things to try
<ul>
<li>Nonparametric/kernel methods (cf. BCO)</li>
</ul></li>
</ul>
<h2 id="alexanlp-experiments">Alexa/NLP experiments</h2>
<ul>
<li>Get LSTM up and running.</li>
<li>Get Yingyu’s word2vec, DL code up and running.
<ul>
<li>Try modifying with other modalities (sentiments, etc.)</li>
</ul></li>
<li>Lisa Lee’s thesis</li>
</ul>
<h2 id="other-experiments">Other experiments</h2>
<ul>
<li>Neural net learns dictionaries: run experiments.
<ul>
<li>NNDL experiment.</li>
<li>Where is the cusp?</li>
</ul></li>
</ul>
<h2 id="learning">Learning</h2>
<ul>
<li>Sum of squares: tensor decomposition (Mon.)</li>
<li>EM algorithm</li>
<li>Tensor decomposition and latent variable model</li>
<li>MDP theory (see above)</li>
<li>Summarize papers</li>
</ul>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Probabilistic models - Ideas</title>
    <link href="http://holdenlee.github.io/notebook/posts/tcs/machine_learning/probabilistic/ideas.html" />
    <id>http://holdenlee.github.io/notebook/posts/tcs/machine_learning/probabilistic/ideas.html</id>
    <published>2016-11-07T00:00:00Z</published>
    <updated>2016-11-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Probabilistic models - Ideas</h1>
    </div>
    <div class="info">
      
       
        <p>Posted: 2016-11-07 
          , Modified: 2016-11-07 
	</p>
      
       <p>Tags: <a href="/tags/none.html">none</a></p> 
    </div>
    
  </div>
  <!--/div-->

  <div class="toc"> <ul>
 <li><a href="#non-generative-framework-for-learning-probabilistic-models">Non-generative framework for learning probabilistic models</a><ul>
 <li><a href="#hmms">HMM’s</a></li>
 <li><a href="#kernel-hmm">Kernel HMM</a></li>
 </ul></li>
 <li><a href="#markov-models-with-exponential-state-space">Markov models with exponential state space</a></li>
 <li><a href="#context-vectors">Context vectors</a></li>
 </ul> </div>

  <div class="blog-main">
    <h2 id="non-generative-framework-for-learning-probabilistic-models">Non-generative framework for learning probabilistic models</h2>
<p>We can adapt Hazan and Ma’s framework [HM16] to learning probabilistic models. Note that given a model, in the limit the number of bits needed to encode a sequence of samples (up to some level of accuracy) is the entropy of that sequence under the model. Thus the natural loss to look at here is the entropy.</p>
<p>We say a distribution <span class="math inline">\(D\)</span> is <span class="math inline">\(\ga\)</span> C-learnable by a hypothesis class <span class="math inline">\(\mathcal H\)</span> of probabilistic models if there is an algorithm, that given <span class="math inline">\(\ep\)</span>, with probability <span class="math inline">\(1-\de\)</span>, outputs a model <span class="math inline">\(m\)</span> such that <span class="math display">\[
\rc{l(\vec x)} \EE_{D} \ln \Pj(\vec x|m) \le \rc{l(\vec x)} \min_{m\in \mathcal H} \EE_{D}\ln \Pj(\vec x|m) + \ep + \ga
\]</span> in time polynomial in the parameters, <span class="math inline">\(\poly\pa{\rc\ep, \ln\prc{\de}, d}\)</span>. Equivalently, the <span class="math inline">\(m\)</span> that is output satisfies <span class="math display">\[
KL(D || m)\le KL(D || \mu) +\ep + \ga.
\]</span> where <span class="math inline">\(\mu\)</span> is the distribution minimizing <span class="math inline">\(KL(D||\mu)\)</span>.</p>
<p>We say the hypothesis class <span class="math inline">\(\mathcal H\)</span> is C-learnable if any distribution <span class="math inline">\(D\)</span> is C-learnable by <span class="math inline">\(\mathcal H\)</span>.</p>
<h3 id="hmms">HMM’s</h3>
<p><strong>Question</strong>: Is the class of HMM’s C-learnable?</p>
<p>The tensor algorithm for HMM’s reduces from the problem of learning from 3 independent views to learning a HMM. Learning from 3 independent views relies on 3-tensor decomposition.</p>
<p>The problem boils down to: <strong>Can we find the closest rank <span class="math inline">\(k\)</span> tensor to a given 3-tensor?</strong> (Consider the regime <span class="math inline">\(k\le n\)</span>, <span class="math inline">\(n\)</span> the dimension.) (If there are <span class="math inline">\(k\)</span> hidden states, the the tensor of probabilities is <span class="math display">\[\pa{\sum_h \Pj(h)\Pj(x_1|h)\Pj(x_2|h) \Pj(x_3|h)}_{x_1x_2x_3} = \sum \Pj(h) (p_1)_h\ot (p_2)_h\ot (p_3)_h.\]</span></p>
<p>Actually, it’s a little harder: the distance here is not the <span class="math inline">\(L^2\)</span> distance but the KL divergence. (We can also consider the <span class="math inline">\(L^2\)</span> distance.) For 2 independent views, this problem becomes: given a matrix <span class="math inline">\(A\)</span> with nonnegative entries summing to 1, find a matrix <span class="math inline">\(B\)</span> with nonnegative entries summing to 1, of rank <span class="math inline">\(k\)</span>, and such that <span class="math inline">\(KL(p_B||p_A)\)</span> is as small as possible.</p>
<h3 id="kernel-hmm">Kernel HMM</h3>
<p>Apply the kernel methods of [SBSG10] Hilbert Space Embeddings of Hidden Markov Models not to the spectral algorithm in [HKZ12] but to the tensor algorithm.</p>
<!--A spectral algorithm for learning Hidden Markov Models, we get a kernel algorithm in an esy -->
<p>This requires some calculation but is straightforward.</p>
<h2 id="markov-models-with-exponential-state-space">Markov models with exponential state space</h2>
<p>Can we learn (hidden) Markov models with exponential state space?</p>
<p>One model is that of a dynamic Bayes net (DBN). Even given pairs <span class="math inline">\((x,y)\)</span> it may be difficult to learn in general (check this…)—if the graph is bounded degree <span class="math inline">\(d\)</span> with bounded edge weights then it could be fixed parameter tractable in <span class="math inline">\(d\)</span>. (To be actually tractable probably the weights have to be <span class="math inline">\(1/d\)</span>.)</p>
<h2 id="context-vectors">Context vectors</h2>
<p>Currently we model documents with the context vector undergoing a random walk (<a href="../nlp/randwalk.html">ALLMR16</a>). I don’t think the different coordinates are so interpretable. (?) A random walk is like a DBM where the connections are <span class="math inline">\(1\to 1', 2\to 2'\)</span>, etc. Can we model the evolution of the context vector as something more complicated but still tractable?</p>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Weekly summary 2016-11-12</title>
    <link href="http://holdenlee.github.io/notebook/posts/summaries/2016-11-12.html" />
    <id>http://holdenlee.github.io/notebook/posts/summaries/2016-11-12.html</id>
    <published>2016-11-07T00:00:00Z</published>
    <updated>2016-11-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Weekly summary 2016-11-12</h1>
    </div>
    <div class="info">
      
       
        <p>Posted: 2016-11-07 
          , Modified: 2016-11-14 
	</p>
      
       <p>Tags: <a href="/tags/none.html">none</a></p> 
    </div>
    
  </div>
  <!--/div-->

  <div class="toc"> <ul>
 <li><a href="#summary">Summary</a></li>
 </ul> </div>

  <div class="blog-main">
    <h2 id="summary">Summary</h2>
<ul>
<li>Neural net learns dictionaries: run experiments. I found nothing unexpected: closeby initialization does converge. The farther away, the farther away the final <span class="math inline">\(A\)</span> is. (But I think it should be a <code>_/</code> shape—where is the cusp?)
<ul>
<li>Are the different dictionaries related by a linear transformation? It seems not.</li>
</ul></li>
<li>Simons meeting—spanning trees, bandit convex optimization.
<ul>
<li>Can we use kernel methods for MDP’s?</li>
</ul></li>
<li>Meeting with Arora
<ul>
<li>Learn about continuous HMM models.</li>
<li>Improve NLP.</li>
</ul></li>
</ul>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Function approximation</title>
    <link href="http://holdenlee.github.io/notebook/posts/tcs/machine_learning/reinforcement_learning/function_approximation.html" />
    <id>http://holdenlee.github.io/notebook/posts/tcs/machine_learning/reinforcement_learning/function_approximation.html</id>
    <published>2016-11-01T00:00:00Z</published>
    <updated>2016-11-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Function approximation</h1>
    </div>
    <div class="info">
      
       
        <p>Posted: 2016-11-01 
          , Modified: 2016-11-01 
	</p>
      
       <p>Tags: <a href="/tags/reinforcement%20learning.html">reinforcement learning</a></p> 
    </div>
    
  </div>
  <!--/div-->

  <div class="toc"> <ul>
 <li><a href="#dp-and-rl-in-large-and-continuous-spaces">3 DP and RL in large and continuous spaces</a><ul>
 <li><a href="#nonparametric-appoximation">3.3.2 Nonparametric appoximation</a></li>
 <li><a href="#section">3.3.3</a></li>
 <li><a href="#approximate-value-iteration">3.4 Approximate value iteration</a><ul>
 <li><a href="#convergence">3.4.4 Convergence</a></li>
 <li><a href="#example-approximate-q-iteration-for-a-dc-motor">3.4.5 Example: Approximate Q-iteration for a DC motor</a></li>
 </ul></li>
 <li><a href="#approximate-policy-iteration">3.5 Approximate policy iteration</a></li>
 </ul></li>
 </ul> </div>

  <div class="blog-main">
    <p>See also “Factored MDPs, MDPs with exponential/continuous state space” in <a href="rl_refs.html">refs</a>.</p>
<ul>
<li>[GWTC13]</li>
<li>Reinforcement learning and DP using FA</li>
<li>Bertsekas Ch. 6, ADP</li>
<li><a href="http://site.ebrary.com/lib/princeton/reader.action?docID=10501323">Powell, ADP</a></li>
<li>Sutton, Ch. 8 (v1)</li>
</ul>
<h2 id="dp-and-rl-in-large-and-continuous-spaces">3 DP and RL in large and continuous spaces</h2>
<p><span class="math inline">\(F(\te)(x,u_j) = \phi^T(x,u_j)\te\)</span>, <span class="math inline">\(\phi\)</span> normalized so entries sum to 1.</p>
<h4 id="nonparametric-appoximation">3.3.2 Nonparametric appoximation</h4>
<p>Kernel-based approximator of <span class="math inline">\(Q\)</span> function <span class="math inline">\(\ka: (X\times U)^2\to \R\)</span>.</p>
<p>Form and number of BF’s not defined in advance <span class="math display">\[
\wh Q(x,u) = \sumo{l_s}{n_s} \ka((x,u), (x_{l_s}, u_{l_s}))\te_{l_s}.
\]</span></p>
<p>(I haven’t been exposed to nonparametric methods - what guarantees do nonparametric methods have?) <!-- relies on kernel function that makes sense for the space --></p>
<h4 id="section">3.3.3</h4>
<p>In between: derive small number of good BF’s from data.</p>
<h3 id="approximate-value-iteration">3.4 Approximate value iteration</h3>
<ul>
<li>LSQI: take a bunch of samples, take <span class="math inline">\(Q\)</span> minimizing least squares.</li>
<li>Online: use gradient descent on parameters <span class="math inline">\(\te\)</span>.</li>
</ul>
<p>Approximate Q-learnig requires exploration.</p>
<h4 id="convergence">3.4.4 Convergence</h4>
<p>Proofs for approximate value iteration rely on contraction mapping arguments. Ex. require <span class="math inline">\(F\)</span> and projection <span class="math inline">\(P\)</span> to be nonexpansions.</p>
<p>Suboptimality for convergence point <span class="math inline">\(\te^*\)</span> bounded in terms of min distance between <span class="math inline">\(Q^*\)</span> and fixed point of <span class="math inline">\(F\circ P\)</span>, <span class="math inline">\(\ze_{QI}^*\)</span>.</p>
<p>(Ditto for nonparametric (kernel-based) approximators.)</p>
<h4 id="example-approximate-q-iteration-for-a-dc-motor">3.4.5 Example: Approximate Q-iteration for a DC motor</h4>
<p>Fitted <span class="math inline">\(Q\)</span>-iteration using ensembles of extremely randomized trees.</p>
<h3 id="approximate-policy-iteration">3.5 Approximate policy iteration</h3>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Weekly summary 2016-11-05</title>
    <link href="http://holdenlee.github.io/notebook/posts/summaries/2016-11-05.html" />
    <id>http://holdenlee.github.io/notebook/posts/summaries/2016-11-05.html</id>
    <published>2016-10-31T00:00:00Z</published>
    <updated>2016-10-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Weekly summary 2016-11-05</h1>
    </div>
    <div class="info">
      
       
        <p>Posted: 2016-10-31 
          , Modified: 2016-10-31 
	</p>
      
       <p>Tags: <a href="/tags/none.html">none</a></p> 
    </div>
    
  </div>
  <!--/div-->

  <div class="toc"> <ul>
 <li><a href="#threads">Threads</a><ul>
 <li><a href="#priority">Priority</a></li>
 <li><a href="#other">Other</a></li>
 </ul></li>
 <li><a href="#other-papers">Other papers</a></li>
 <li><a href="#people-to-talk-to">People to talk to</a></li>
 </ul> </div>

  <div class="blog-main">
    <p><a href="2016-10-29.html">Last week</a>. (See also <a href="2016-10-22.html">wonderings</a>.)</p>
<h2 id="threads">Threads</h2>
<h3 id="priority">Priority</h3>
<ul>
<li>Come up with a class of MDPs on exponential space that is interesting and tractable. <a href="/posts/tcs/machine_learning/reinforcement_learning/continuous.html">Thoughts</a> (Tuesday)
<ul>
<li>Understand provable guarantees on MDP’s first</li>
</ul></li>
<li>PMI - get some results!
<ul>
<li>Mon. - train CIFAR.</li>
<li>Todos
<ul>
<li>Check MNIST model 1. What are sizes of coefficients?</li>
<li>Run experiments on CIFAR.</li>
</ul></li>
</ul></li>
</ul>
<h3 id="other">Other</h3>
<ul>
<li>SoS <a href="/posts/tcs/complexity/sos.html">summary</a> (Monday: wrote up notes.)</li>
<li>DL experiments <a href="/posts/tcs/machine_learning/matrices/DL_generalization.html">DL generalization</a></li>
<li>On hold
<ul>
<li>(*) NN learns DL. Can write up weak result, worth doing?</li>
</ul></li>
<li>Papers (Wednesday: read through)
<ul>
<li>[HM16] on unsupervised learning (finish)</li>
<li>[HMR16] on dynamical system learning</li>
<li>[R16] on convex relaxations for partition function calculation</li>
</ul></li>
<li>Ch. 3-4 of Graphical models book. (Friday) <a href="/posts/tcs/machine_learning/probabilistic/graphical_models.html">Notes</a></li>
<li><a href="/posts/tcs/machine_learning/probabilistic/ideas.html">Thoughts on HMMs, etc.</a> (Friday)</li>
</ul>
<p>Analyze Arora and Ge’s NMF algorithm in the presence of noise. Exactly how much noise can it tolerate?</p>
<h2 id="other-papers">Other papers</h2>
<ul>
<li>TODO Read this paper: [CFP16] Assessing significance in a Markov chain without mixing</li>
</ul>
<h2 id="people-to-talk-to">People to talk to</h2>
<ul>
<li>Yingyu, on PMI</li>
</ul>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>(MVB16) Geometry of Polysemy</title>
    <link href="http://holdenlee.github.io/notebook/posts/tcs/machine_learning/nlp/MVB16.html" />
    <id>http://holdenlee.github.io/notebook/posts/tcs/machine_learning/nlp/MVB16.html</id>
    <published>2016-10-28T00:00:00Z</published>
    <updated>2016-10-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>(MVB16) Geometry of Polysemy</h1>
    </div>
    <div class="info">
      
       
        <p>Posted: 2016-10-28 
          , Modified: 2016-10-28 
	</p>
      
       <p>Tags: <a href="/tags/nlp.html">nlp</a>, <a href="/tags/word%20vectors.html">word vectors</a>, <a href="/tags/polysemy.html">polysemy</a></p> 
    </div>
    
  </div>
  <!--/div-->

  <div class="toc"> <ul>
 <li><a href="#abstract">Abstract</a></li>
 <li><a href="#comments">Comments</a></li>
 <li><a href="#summary">Summary</a><ul>
 <li><a href="#algorithm">1 Algorithm</a></li>
 <li><a href="#experiments">2 Experiments</a></li>
 <li><a href="#further-thoughts">Further thoughts</a></li>
 </ul></li>
 </ul> </div>

  <div class="blog-main">
    <h2 id="abstract">Abstract</h2>
<p>Title: Geometry of Polysemy</p>
<p><a href="https://arxiv.org/pdf/1610.07569v1.pdf">Link</a></p>
<p>Abstract: Vector representations of words have heralded a transformational approach to classical problems in NLP; the most popular example is word2vec. However, a single vector does not suffice to model the polysemous nature of many (frequent) words, i.e., words with multiple meanings. In this paper, we propose a three-fold approach for unsupervised polysemy modeling: (a) context representations, (b) sense induction and disambiguation and (c) lexeme (as a word and sense pair) representations. A key feature of our work is the finding that a sentence containing a target word is well represented by a low rank subspace, instead of a point in a vector space. We then show that the subspaces associated with a particular sense of the target word tend to intersect over a line (one-dimensional subspace), which we use to disambiguate senses using a clustering algorithm that harnesses the Grassmannian geometry of the representations. The disambiguation algorithm, which we call <span class="math inline">\(K\)</span>-Grassmeans leads to a procedure to label the different senses of the target word in the corpus – yielding lexeme vector representations, all in an unsupervised manner starting from a large (Wikipedia) corpus in English. Apart from several prototypical target (word,sense) examples and a host of empirical studies to intuit and justify the various geometric representations, we validate our algorithms on standard sense induction and disambiguation datasets and present new state-of-the-art results.</p>
<h2 id="comments">Comments</h2>
<p>Authors say: Our algorithm (<span class="math inline">\(K\)</span>-Grassmeans) does slightly, but uniformly, better than the precision-recall that you report. But the surprising thing is that a simple baseline we setup using standard word2vec individual vectors also gets very close to the performance of your algorithm! We hypothesize why this could be so in Section 5 where we see that the all the algorithm outputs are highly correlated. They get the easy instance all correct and the ones that they make errors on are actually hard/subtle (or rare in the context of the corpus we use (which is Wikipedia)).</p>
<h2 id="summary">Summary</h2>
<p>(by Yingyu)</p>
<h3 id="algorithm">1 Algorithm</h3>
<p>Their algorithm is quite interesting, building on two key ideas: 1) the context of a word can be represented by a subspace 2) the context subspace of the same sense of a word will intersect.</p>
<p>The algorithm is:</p>
<ol type="1">
<li>for each occurrence of a target word, take say a context window of size 10 around the occurrence. The subspace of the word vectors in the window is the subspace for this context. They take rank-3 PCA. I think this is related to what we did in the linear structure paper.</li>
<li>take all the context subspaces of a target polysemous word, cluster them into K groups. The clustering objective is called K-Grassman. It is similar to k-means, except that the center is a direction and the distance is the distance between a direction and a subspace. (This is word sense induction)</li>
<li>given a new context of the target word, one can build the context subspace, find the closest center obtained in the K-Grassman. (This is word sense disambiguation)</li>
</ol>
<p>Finally, they also talked about lexeme representation. I understand this as given a polysemous word, how to represent its meanings. It’s tempting to represent it as the K cluster centers obtained in the K-Grassman. However, they found that these directions tend to be close; the inner product tends to be as large as 0.9. They leave how to explain this as an open problem, then provide another way to do the lexeme representation: first use the above word sense disambiguation algo to label the words in the corpus, and then train a vector for each sense of each word.</p>
<p><strong>My thoughts</strong>: I think the inner products between these cluster centers are large because of a simple reason: frequent words like “the” pop up in all context, so all context subspace has these components. This problem has been observed in multiple scenarios. For obtaining vectors for sentences, we can avoid this by doing a weighted average of the word vectors. So one way to handle this problem for subspace is: when computing the subspace for a sentence/context, find a subspace minimizing the weighted sum of the distances from the word vectors to the subspace. This should be better than PCA, which is minimizing the unweighted sum.</p>
<p>Their idea also implies a way to do sentence embedding: instead of using vectors, use subspace.</p>
<h3 id="experiments">2 Experiments</h3>
<p>They tested on word similarity task dataset and our police lineup dataset.</p>
<p>On the police lineup, their result is better than ours. But theirs, ours, and simply using word2vec vectors, all lead to quite similar performance. (I observed this for our vectors before.) They mentioned that all methods are OK on easy ones but fail on hard ones in the testset. This is probably because some senses are rare on wiki data.</p>
<h3 id="further-thoughts">Further thoughts</h3>
<p>Since we view a sentence as a subspace, then it makes sense to generalize our random walk model so that the discourse is now a subspace.</p>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>RL references</title>
    <link href="http://holdenlee.github.io/notebook/posts/tcs/machine_learning/reinforcement_learning/rl_refs.html" />
    <id>http://holdenlee.github.io/notebook/posts/tcs/machine_learning/reinforcement_learning/rl_refs.html</id>
    <published>2016-10-25T00:00:00Z</published>
    <updated>2016-10-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>RL references</h1>
    </div>
    <div class="info">
      
       
        <p>Posted: 2016-10-25 
          , Modified: 2016-11-01 
	</p>
      
       <p>Tags: <a href="/tags/reinforcement%20learning.html">reinforcement learning</a></p> 
    </div>
    
  </div>
  <!--/div-->

  <div class="toc"> <ul>
 <li><a href="#online">Online</a></li>
 <li><a href="#books">Books</a></li>
 <li><a href="#papers">Papers</a><ul>
 <li><a href="#theoretical-frameworks-and-results">Theoretical frameworks and results</a></li>
 <li><a href="#mdps">MDPs</a><ul>
 <li><a href="#convergence-of-classic-algorithms">Convergence of classic algorithms</a></li>
 <li><a href="#theory-algorithms">Theory algorithms</a></li>
 </ul></li>
 <li><a href="#factored-mdps-mdps-with-exponentialcontinuous-state-space">Factored MDPs, MDPs with exponential/continuous state space</a></li>
 <li><a href="#pomdps">POMDPs</a></li>
 <li><a href="#open-questions">Open questions</a></li>
 <li><a href="#surveys">Surveys</a></li>
 </ul></li>
 </ul> </div>

  <div class="blog-main">
    <h2 id="online">Online</h2>
<ul>
<li><a href="https://github.com/andrewliao11/Deep-Reinforcement-Learning-Survey/blob/master/Reinforcement-Learning-Papers.md">Deep RL</a></li>
<li>ICML presentation (David Silver)</li>
<li><a href="http://castlelab.princeton.edu/">CASTLE Labs</a>
<ul>
<li><a href="http://optimallearning.princeton.edu/">Optimal learning</a></li>
<li><a href="http://adp.princeton.edu/">Approximate dynamic programming</a>
<ul>
<li><a href="http://adp.princeton.edu/adpIntros.htm">Intros</a></li>
</ul></li>
<li><a href="http://castlelab.princeton.edu/jungle.htm#unifiedframework">Unified framework</a></li>
</ul></li>
</ul>
<h2 id="books">Books</h2>
<p><a href="https://www.quora.com/What-are-the-best-books-about-reinforcement-learning">Quora recommendations</a></p>
<ul>
<li>(*) <a href="https://webdocs.cs.ualberta.ca/~sutton/book/the-book-1st.html">Sutton Barto</a> <a href="rl.html"><strong>Notes</strong></a></li>
<li><a href="https://books.google.com/books?id=VvBjBAAAQBAJ&amp;printsec=frontcover&amp;dq=continuous+markov+decision+processes&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwjo3OLywOnPAhVHWD4KHXzgDWUQ6AEIKTAC#v=onepage&amp;q=continuous%20markov%20decision%20processes&amp;f=false">Puterman14</a></li>
<li><a href="http://site.ebrary.com/lib/princeton/reader.action?docID=10501323">Approximate DP, Powell</a></li>
<li><a href="http://site.ebrary.com/lib/princeton/detail.action?docID=10560566">Optimal learning, Powell</a></li>
<li>(*) <a href="http://www.crcnetbase.com/isbn/9781439821091">Function approximators, Lucian Busoniu, Robert Babuska, Bart De Schutter, and Damien Ernst</a></li>
<li><a href="http://web.mit.edu/dimitrib/www/dpchapter.pdf">ADP chapter, Bertsekas</a></li>
<li><a href="https://books.google.com/books?id=-6RiQgAACAAJ&amp;dq=Dynamic+Programming:+Deterministic+and+Stochastic+Models&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwjc0pfAyefPAhUGFz4KHaVIDecQ6AEIHjAA">Bertsekas87</a></li>
</ul>
<h2 id="papers">Papers</h2>
<h3 id="theoretical-frameworks-and-results">Theoretical frameworks and results</h3>
<ul>
<li>(*) [KMN02] A Sparse Sampling Algorithm for Near-Optimal Planning in Large Markov Decision Processes <a href="http://download.springer.com/static/pdf/530/art%253A10.1023%252FA%253A1017932429737.pdf?originUrl=http%3A%2F%2Flink.springer.com%2Farticle%2F10.1023%2FA%3A1017932429737&amp;token2=exp=1477079019~acl=%2Fstatic%2Fpdf%2F530%2Fart%25253A10.1023%25252FA%25253A1017932429737.pdf%3ForiginUrl%3Dhttp%253A%252F%252Flink.springer.com%252Farticle%252F10.1023%252FA%253A1017932429737*~hmac=6c901205464aff209a8d3ca5ba481b36b72959a0d61fc762dfc512f12c01a38c">paper</a>
<ul>
<li>PAC formulation</li>
</ul></li>
<li>[AAKMR02] A Note on the Representational Incompatibility of Function Approximation and Factored Dynamics.pdf
<ul>
<li>Barrier to solving factored MDP’s is not just computational ([PT87]), it is representational (there is no succinct policy)</li>
<li>DBN-MDP (factored MDP): transition law <span class="math inline">\(\de\)</span> is dynamic Bayes net. The first layer are the variables (and action) at time <span class="math inline">\(t\)</span>, the second layer are the variables at time <span class="math inline">\(t+1\)</span>, the graph is directed, the indegree of each second-layer node is at most constant.</li>
<li>Rewards are linear.</li>
<li>Connection with AM-games: V’s state corresponds to state, P implements policy.</li>
<li>If PSPACE is not contained in P/POLY, then there is a family of DBN-MDPs, such that for any two polynomials <span class="math inline">\(s,a\)</span>, there exist infinitely many <span class="math inline">\(n\)</span> such that no circuit <span class="math inline">\(C\)</span> of size <span class="math inline">\(s(n)\)</span> can compute a policy having expected reward greater than <span class="math inline">\(\rc{a(n)}\)</span> times the optimum.</li>
<li>(This is the policy optimization part. Can you learn Bayes nets? <span class="citation" data-cites="Andrej">@Andrej</span>)</li>
<li>(Note that the “drifting context vector (RANDWALK)” model can be represented by a model with <span class="math inline">\(1\to 1', 2\to 2',\ldots\)</span>.)</li>
<li>What if you only compared to the best policy in a class of policies? (cf. EXP4)</li>
</ul></li>
</ul>
<h3 id="mdps">MDPs</h3>
<h4 id="convergence-of-classic-algorithms">Convergence of classic algorithms</h4>
<ul>
<li>[PB79] On the convergence of policy iteration in stationary dynamic programming.pdf
<ul>
<li>Equivalent to Newton-Kantorovich iteration procedure applied to functional equation of dynamic programming.</li>
<li>Sufficient conditions for superlinear or quadratic convergence. See [Howard].</li>
<li>Note: Does NOT apply to finite state MDPs! (Problem being that “best action” is not continuous in parameters?)</li>
</ul></li>
<li>[SR04] Convergence properties of policy iteration.pdf
<ul>
<li>Compare to method of successive approximations. SA is bad when <span class="math inline">\(\ga\approx 1\)</span>.</li>
</ul></li>
<li>[TVR96] An Analysis of Temporal-Difference Learning with Function Approximation <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.92.92&amp;rep=rep1&amp;type=pdf">paper</a>
<ul>
<li><span class="math inline">\(TD(\la)\)</span> convergence</li>
<li>What is rate??</li>
</ul></li>
<li>[B95] Residual Algorithms: Reinforcement learning with function approximation <a href="https://books.google.com/books?hl=en&amp;lr=&amp;id=akijBQAAQBAJ&amp;oi=fnd&amp;pg=PA30&amp;dq=baird+residual+algorithms+function+approximation&amp;ots=MJ_Hs5vMBs&amp;sig=RTG7KgQgM4GWWIwSvg1wOYRmJDc#v=onepage&amp;q=baird%20residual%20algorithms%20function%20approximation&amp;f=false">paper</a>
<ul>
<li>Q-learning instability</li>
</ul></li>
<li>[WD92] Q-learning
<ul>
<li>Given bounded rewards, learning rates <span class="math inline">\(0\le \al_n&lt;1\)</span>, and <span class="math inline">\(\sumo i{\iy} \al_{n^i(x,a)}=\iy\)</span> (<span class="math inline">\(n^i(x,a)\)</span> is the <span class="math inline">\(i\)</span>th time <span class="math inline">\(a\)</span> is tried in state <span class="math inline">\(x\)</span>) then <span class="math inline">\(Q_n\to Q^*\)</span> wp 1.</li>
<li>Doesn’t address: under what <span class="math inline">\(Q\)</span>? What if updating policy at same time? What’s regret?</li>
</ul></li>
</ul>
<h4 id="theory-algorithms">Theory algorithms</h4>
<ul>
<li>(*) [AO06] Logarithmic online regret bounds for undiscounted reinforcement learning
<ul>
<li>UCRL</li>
<li>Maintain confidence bounds on rewards and transition probabilities.</li>
<li>Only apply to unichain MDP’s: the stationary distribution of any policy does not depend on the start state (this is to make things easier, can do without)</li>
<li>Other work: adversarial reward, index policies (choose action with max return in confidence region)</li>
</ul></li>
<li>[LH12] PAC bounds for discounted MDPs <a href="https://arxiv.org/pdf/1202.3890.pdf">paper</a>
<ul>
<li>UCRL, under assumption of 2 possible next-states for each state/action pair, PAC bound of <span class="math inline">\(\wt O \pa{\fc{|S\times A|}{\ep^2(1-\ga)^3}\ln \prc{\de}}\)</span>.</li>
</ul></li>
<li>[KS02] Near-optimal reinforcement learning in polynomial time</li>
<li>(*) [JOA10] Near-optimal regret bounds for reinforcement learning <a href="http://www.jmlr.org/papers/volume11/jaksch10a/jaksch10a.pdf">paper</a>
<ul>
<li>Improved UCRL (UCRL2)</li>
</ul></li>
<li>[KN09] Near-Bayesian Exploration in Polynomial Time <a href="http://www.zicokolter.com/wp-content/uploads/2015/10/kolter-icml09a-full.pdf">paper</a></li>
<li>[KAL16] Contextual-MDP, which is contextual bandits + RL.
<ul>
<li>Regret wrt policy class.</li>
<li>Poly in parameters, log in number of policies, independent of size of observation space. <span class="math inline">\(\poly(M, K, H, \ep, \ln N, \ln \prc\de)\)</span> <!--what does no dependence on numspace can represent exact-best solution, state transition dynamics are deterministic.--></li>
<li>Unlike POMDP, optimal policy is memoryless. (Definition is just this. For simplicity, consider layered POMDP’s.)
<ul>
<li>Ex. Disjoint contexts. Don’t know which observations correspond to which contexts! (Q: for HMM with “too many” observations what can we do?)</li>
</ul></li>
<li>Warning: inefficient b/c requires enumeration of policy class. (? does this contradict the poly/log time above)</li>
<li>Assumptions
<ul>
<li><span class="math inline">\(Q\)</span> is realizable within the function class. (WHY doesn’t this work in the agnostic case?)</li>
<li>Deterministic transitions</li>
</ul></li>
<li>Algorithm (cMDP-learn)
<ul>
<li>DFS-learn
<ul>
<li>TD-elim: eliminate functions that do not approximate <span class="math inline">\(Q^*\)</span> well (that do significantly worse than the best approximator so far)</li>
<li>Consensus: Compute MC estimates for the observable in the current state (run a lot of episodes, using the same actions up to the current point; because the system is deterministic the state is the same). If they are all close in value, return true, else return false.</li>
</ul></li>
<li>Explore-on-demand
<ul>
<li>Select a surviving policy, estimate <span class="math inline">\(V\)</span> at root; if highly suboptimal value, invoke DFS-learn on paths visited by <span class="math inline">\(\pi_f\)</span>.</li>
</ul></li>
</ul></li>
<li>Idea: if a surviving policy <span class="math inline">\(\pi_f\)</span> visits only states for which TD-Elim has been invoked, it must have near-optimal reward.</li>
<li>Undesirables
<ul>
<li>Deterministic transition</li>
<li>Enumerate class of regression functions</li>
<li>Realizability assumptions</li>
</ul></li>
</ul></li>
<li>[DPWR15] Bayesian Nonparametric Methods for Partially-Observable Reinforcement Learning <a href="http://dspace.mit.edu/handle/1721.1/97034">paper</a>
<ul>
<li>Bayes!</li>
</ul></li>
</ul>
<h3 id="factored-mdps-mdps-with-exponentialcontinuous-state-space">Factored MDPs, MDPs with exponential/continuous state space</h3>
<ul>
<li>[HSMM15] Off-policy Model-based Learning under Unknown Factored Dynamics.pdf
<ul>
<li>Under 3 assumptions, using a greedy approach to finding parents, estimate the transition function (parameters to Bayes net) (compre with prob models literature?)</li>
<li>This is for off-policy evaluation; it doesn’t tell us how to find the optimal policy.</li>
<li>(Is the model learning and policy evaluation coupled or not?)</li>
<li>(It seems to be learning the Bayes net rather than evaluating <span class="math inline">\(\pi\)</span>. Ah, once you learn the Bayes net then you can evaluate just by sampling.)</li>
<li>The difference from simpling learning a Bayes net is that the samples aren’t independent—they were from following a certain policy. Assumptions will ensure that you can still learn the model even if you only have samples from that policy.</li>
</ul></li>
<li>[EGW05] Tree-Based Batch Mode Reinforcement Learning
<ul>
<li>Introduced fitted Q-iteration (see below).</li>
</ul></li>
<li>(*) [AMS08] Fitted Q-iteration in continuous action-space MDPs
<ul>
<li>Fitted Q-iteration: Given a simulator, sample next actions <span class="math inline">\(s'\)</span> given <span class="math inline">\(s,a\)</span>. Given <span class="math inline">\(Q^{n}\)</span>, approximate <span class="math inline">\(Q^{n+1}\)</span> with these samples, then approximate <span class="math inline">\(Q^{n+1}\)</span> as <span class="math inline">\(Q(s,a)=\te^T\phi(s,a)\)</span>. Use least squares: LSFQI. Then pick best <span class="math inline">\(\wh \pi_{n+1}\)</span> using the approximation of <span class="math inline">\(Q^{n+1}\)</span>.</li>
<li>Space of functions can be neural networks, linear combination of selected basis functions, restriction of RKHS (cf. LS-SVM).</li>
<li>Warning: it’s not just the pseudo-dimension (related to VC dimension) of the function class <span class="math inline">\(\mathcal F\)</span> that matters, but that of <span class="math inline">\(\mathcal F_{\max}^{\wedge} = \set{\max_{a\in A} Q(x,a)}{Q\in \mathcal F}\)</span>. (Actually, use the notion of <a href="http://ttic.uchicago.edu/~tewari/lectures/lecture16.pdf">fat shattering functions</a>.)</li>
<li>Also called “fitted actor-critic algorithm”.</li>
<li>Under many assumptions, the error in <span class="math inline">\(V\)</span> can be bounded in terms of the pseudo-dimension of the function class <span class="math inline">\(\mathcal F\)</span>.</li>
</ul></li>
<li>[FDMW04] Dynamic Programming for Structured Continuous Markov Decision Problems <a href="https://arxiv.org/ftp/arxiv/papers/1207/1207.4115.pdf">paper</a>
<ul>
<li>Group together states belonging to the same “plateau” where expected reward is nearly constant.</li>
<li>Use kd-trees to store the rectangular partitions.</li>
</ul></li>
<li>[HK03] Linear Program Approximations for Factored Continuous-State Markov Decision Processes <a href="http://machinelearning.wustl.edu/mlpapers/paper_files/NIPS2003_CN19.pdf">paper</a>
<ul>
<li>2 settings
<ul>
<li>Factored MDP’s: approximate <span class="math inline">\(V\)</span> within a class of functions <span class="math inline">\(\spn(\{f_i\})\)</span>. (Ex. each <span class="math inline">\(f_i\)</span> depends on a small subset of variables.) Here, minimize <span class="math inline">\(\sum w_i \sum_x f_i(x)\)</span> over all <span class="math inline">\(f\)</span>’s that overestimate the reward: <span class="math inline">\(\sum_i w_i(f_i - \ga \sum_{x_i'} \Pj(x_i'|x_i, a)f_i(x_i'))-R(x,a)\ge 0\)</span> forall <span class="math inline">\(x,a\)</span>.
<ul>
<li>Problem: infinite number of constraints. Insight: only a finite subset are active at any time.</li>
</ul></li>
<li>Continuous MDP’s. Consider conjugate classes of transition models and basis functions that give closed-form expressions.</li>
</ul></li>
</ul></li>
<li>[LL05] Lazy Approximation for Solving Continuous Finite-Horizon MDPs <a href="http://www.aaai.org/Papers/AAAI/2005/AAAI05-186.pdf">paper</a>
<ul>
<li>In value iteration <span class="math display">\[V^{n+1}(x) = \max_{a\in A} \ba{R(x,a) + \int_X T(x'|x,a)V^n(x')\dx'}\]</span> replace <span class="math inline">\(V^n\)</span> with a piecewise constant approximation. (Otherwise it becomes a piecewise higher order polynomial.)</li>
</ul></li>
<li>[MTT] A Fast Analytical Algorithm for MDPs with Continuous State Spaces <a href="http://www.sci.brooklyn.cuny.edu/~parsons/events/gtdt/gtdt06/marecki.pdf">paper</a>
<ul>
<li>Focuses on MDP’s where the transition time (after an action) is governed by a exponential pdf <span class="math inline">\(\la e^{-\la t'}\)</span>.</li>
</ul></li>
<li>[TS06] Probabilistic Inference for Solving Discrete and Continuous State Markov Decision Processes <a href="http://machinelearning.wustl.edu/mlpapers/paper_files/icml2006_ToussaintS06.pdf">paper</a>
<ul>
<li>The problem of solving a MDP (with decay <span class="math inline">\(\ga\)</span>) can be reduced to max likelihood estimation. (It is over a mixture of finite-time MDP’s, weighted geometrically in <span class="math inline">\(\ga\)</span> in the length.)</li>
<li>Now use EM to maximize the likelihood.</li>
</ul></li>
<li><a href="https://www.cs.utah.edu/~piyush/teaching/continuous-mdp.pdf">Lecture notes</a>
<ul>
<li>Discretization</li>
<li>Fitted value iteration: Given a simulator, sample next actions <span class="math inline">\(s'\)</span> given <span class="math inline">\(s,a\)</span>. Given <span class="math inline">\(V^{n}\)</span>, approximate <span class="math inline">\(V^{n+1}\)</span> with these samples, then approximate <span class="math inline">\(V^{n+1}\)</span> as <span class="math inline">\(V(s)=\te^T\phi(s)\)</span> (ex. using least squares).</li>
<li>Can be extended to least-squares policy iteration.</li>
</ul></li>
<li><a href="http://burlap.cs.brown.edu/tutorials/scd/p1.html">tutorial</a></li>
<li><a href="https://scholar.google.com/scholar?hl=en&amp;q=mdp+with+continuous+state+space">google scholar search</a></li>
</ul>
<h3 id="pomdps">POMDPs</h3>
<ul>
<li>(*) [ALA16] Reinforcement Learning of POMDPs using Spectral Methods <a href="http://www.jmlr.org/proceedings/papers/v49/azizzadenesheli16a.pdf">paper</a>
<ul>
<li>Spectral parameter estimation for POMDP’s</li>
<li>Combine with UCRL (exploration-exploitation framework) to get regret bounds (compared to memoryless policies) optimal in dependence on <span class="math inline">\(N\)</span> (<span class="math inline">\(O(\sqrt N)\)</span>)</li>
<li>Challenges
<ul>
<li>Unlike HMM, consecutive observations not conditionally independent</li>
<li>Technical: Concentration inequalities for dependent rv’s. Extend to marix value functions.</li>
</ul></li>
<li>Previous/other work
<ul>
<li>UCRL</li>
<li>model-free algorithms (<span class="math inline">\(Q\)</span>-learning)</li>
<li>policy search methods</li>
<li>separate exploration and exploitation collect examples, then estimate parameters [Guo16]. PAC in RL POMDP?</li>
</ul></li>
<li>Regret bounds optimal in <span class="math inline">\(N\)</span> (<span class="math inline">\(\wt O(\sqrt N)\)</span>). Depends on a natural notion of “diameter” for POMDP’s (different from definition for MDP’s. max mean passage time using best <span class="math inline">\(\pi\)</span>).</li>
<li>Idea: by restricting to memoryless policies, generate conditionally independent views.</li>
<li><span class="math inline">\(\mathcal P\)</span> set of all stochastic memoryless policies that have a non-zero probability to explore all actions. Assume <span class="math inline">\(\pi\in \mathcal P\)</span>.</li>
<li>Method
<ul>
<li>Can’t use spectral method for HMM’s.</li>
<li>But same idea: find 3 conditionally independent views (given <span class="math inline">\(x_t, a_t\)</span>), use a “symmetrization” technique, and find spectral decomposition.</li>
</ul></li>
<li>UCRL integration
<ul>
<li>distribution of the views <span class="math inline">\(v_1, v_2, v_3\)</span> depends on the policy used to generate the samples. As a result, whenever the policy changes, the spectral method should be re-run using only the samples collected by that specific policy.</li>
<li>Construct set of admissible POMDP’s whose T, O, R models are in confidence interval</li>
</ul></li>
<li>Open: analyze UCRL for finite horizon.</li>
<li>Stochastic policies are near-optimal in many domains (?). NP-hard to optimize but under some conditions can approximate</li>
</ul></li>
<li>[ALA16] Open Problem - Approximate Planning of POMDPs in the class of Memoryless Policies (COLT2016) <a href="http://www.jmlr.org/proceedings/papers/v49/azizzadenesheli16b.pdf">paper</a>
<ul>
<li>Find exact or approximate optimal stochastic memoryless policy for POMDP.</li>
<li>What [ALA16] don’t address in other paper: planning. (Complexity considerations? i.e. is this tractable? Kaelbling98)</li>
<li>In their paper they assume access to an optimization oracle that gives best memoryless planning policy at end of each episode. - No algorithm for this right now! <!--SoS? First check if you can reduce from Nash equilibrium, etc.--></li>
</ul></li>
<li>[GDB16] A PAC RL algorithm for episodic POMDPs <a href="http://www.jmlr.org/proceedings/papers/v51/guo16b.pdf">paper</a>
<ul>
<li>PAC: whp, selects near-optial action on all but a number of steps poly in problem paramters (what is the definition?)</li>
<li>PAC learns in time <span class="math inline">\(T(\ep)\)</span> means: achieves an expected episodic reward of <span class="math inline">\(V\ge V^*-\ep\)</span> on all but <span class="math inline">\(T(\ep)\)</span> episodes.</li>
<li>First PAC POMDP RL algorithm for episodic domains</li>
<li>EEPORL
<ul>
<li>Algorithm 1:
<ul>
<li>In each episode, take first four steps randomly (in correlated fashion) to explore. Need to assume that have probability of being anywhere in 2 steps.</li>
<li>Take chosen policy for the rest of the steps.</li>
</ul></li>
<li>Algorithm 2: Update estimates for POMDP parameters.</li>
<li>Algorithm 3: Find best policy for current estimates of parameters.</li>
</ul></li>
</ul></li>
</ul>
<h3 id="open-questions">Open questions</h3>
<ul>
<li>[S99] Open Theoretical Questions in Reinforcement Learning (not sure how open these are anymore!)
<ul>
<li>Control with function approximation
<ul>
<li>TD(<span class="math inline">\(\la\)</span>) understood [TsVR97]</li>
<li>Q-learning unstable [Baird95]</li>
<li>Sarsa ??? (tends to oscillate close to best)</li>
</ul></li>
<li>MC ES convergence (see update in BS?)</li>
<li>Bootstrapping more efficient than MC?</li>
<li>VC dimension over RL
<ul>
<li>Difficulty: different actions lead to different parts of space, so we don’t have a natural “test set” that can be reused to evaluate different policies (Test set seems like it would be drawn from different policies?)</li>
<li>Proposal: trajectory trees: tree of all sample transitions</li>
<li>Extend PAC to this setting.</li>
</ul></li>
</ul></li>
</ul>
<h3 id="surveys">Surveys</h3>
<ul>
<li>[G] Reinforcement learning - a Tutorial Survey and Recent Advances.pdf</li>
<li>[KLM96] Reinforcement Learning - A Survey.pdf</li>
<li>[P14] Clearing the Jungle of Stochastic Optimization
<ul>
<li>4 classes of policies</li>
<li>Dynamic vs. stochastic programs</li>
</ul></li>
<li>[P14] Energy and Uncertainty - models and algorithms for complex energy systems.pdf</li>
<li>(*) [P16] A Unified Framework for Optimization under Uncertainty</li>
<li><a href="http://people.csail.mit.edu/agf/Files/13FTML-RLTutorial.pdf">lin function approximators</a></li>
<li><a href="https://hal.archives-ouvertes.fr/hal-00747575v5/document">optimistic principle</a></li>
<li><a href="http://www.morganclaypool.com/doi/abs/10.2200/S00268ED1V01Y201005AIM009">Algorithms for RL</a></li>
</ul>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>

</feed>
